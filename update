#!/usr/bin/php
<?php
$args = $argv;
$cmd = array_shift( $args );
$type = 'all';
$success = array();
$themes = array();
if ( !empty( $args[0] ) ) {
	$type = $args[0];
}

switch ( $type ) {
	case 'all':
		$directory = 'themes';
		$download = 'zips/%s.zip';
		break;
	default:
		echo $cmd . ": invalid command\r\n";
		echo 'Usage: php ' . $cmd . " [command]\r\n\r\n";
		echo "Available commands:\r\n";
		echo "  all - Downloads full theme zips\r\n";
		die();
}

echo "Determining most recent SVN revision...\r\n";
try {
	$changelog = @file_get_contents( 'https://themes.trac.wordpress.org/log/?format=changelog&stop_rev=HEAD' );
	if ( !$changelog )
		throw new Exception( 'Could not fetch the SVN changelog' );
	preg_match( '#\[([0-9]+)\]#', $changelog, $matches );
	if ( !$matches[1] )
		throw new Exception( 'Could not determine most recent revision.' );
} catch ( Exception $e ) {
	die( $e->getMessage() . "\r\n" );
}
$svn_last_revision = (int) $matches[1];
echo "Most recent SVN revision: " . $svn_last_revision . "\r\n";
if ( file_exists( $directory . '/.last-revision' ) ) {
	$last_revision = (int) file_get_contents( $directory . '/.last-revision' );
	echo "Last synced revision: " . $last_revision . "\r\n";
} else {
	$last_revision = false;
	echo "You have not yet performed a successful sync. Settle in. This will take a while.\r\n";
}

$start_time = time();

if ( $last_revision != $svn_last_revision ) {
	if ( $last_revision ) {
		$changelog_url = sprintf( 'https://themes.trac.wordpress.org/log/?verbose=on&mode=follow_copy&format=changelog&rev=%d&limit=%d', $svn_last_revision, $svn_last_revision - $last_revision );
		$changes = file_get_contents( $changelog_url );
		preg_match_all( '#^' . "\t" . '*\* ([^/A-Z ]+)[ /].* \((added|modified|deleted|moved|copied)\)' . "\n" . '#m', $changes, $matches );
		$themes = array_unique( $matches[1] );
	} else {
		$themes = file_get_contents( 'https://themes.svn.wordpress.org/' );
		preg_match_all( '#<li><a href="([^/]+)/">([^/]+)/</a></li>#', $themes, $matches );
		$themes = $matches[1];
	}

	foreach ( $themes as $theme ) {
		$theme = urldecode( $theme );
		echo "Updating " . $theme . "\n";

		$args = ( array(
			'slug' 	 => $theme ,
			'fields' => array('sections' => false, 'tags' => false, 'rating' => false, 'downloaded' => false, 'homepage' => false, 'template' => false, 'screenshot_url' => false ),
		) );
		$action = 'theme_information';
		$data = array(
			'action' => $action,
			'request' => $args,
		);
		
  		$url = 'https://api.wordpress.org/themes/info/1.1/?' . http_build_query( $data );
		$response = file_get_contents( $url );
		if ( $response === false || $response === 'false' ) {
			echo ' Unable to fetch ' . $theme . "\n";
			continue;
		}

		$response = json_decode( $response );
		if ( empty( $response->download_link ) ) {
			echo ' No download link available for theme ' . $theme . "\n";
			continue;
		}

		$ch   = curl_init();
		$path = sprintf( $download, $theme );
		$file = fopen( $path, 'w' );
		/*
		 * If the downloads are failing with an SSL related error, uncommenting the
		 * below line and pointing it to a valid certificate bundle on your local machine
		 * will normally fix this.
		 */
		// curl_setopt( $ch, CURLOPT_CAINFO, '/path/to/openssl/cacert.pem' );
		curl_setopt( $ch, CURLOPT_URL, $response->download_link );
		curl_setopt( $ch, CURLOPT_FILE, $file );
		curl_exec( $ch );
		$errno = curl_errno( $ch );
		curl_close( $ch );
		fclose( $file );

		if ( 0 === $errno && file_exists( $path ) ) {

			if ( 'all' === $type ) {

				if ( file_exists( 'themes/' . $theme ) )
					delete( 'themes/' . $theme );

				$zip = new ZipArchive;

				if ( true === $zip->open( $path ) ) {

					$zip->extractTo( 'themes' );
					$zip->close();
				}

				unlink( $path );
			}
			$success[] = $theme;
		} else {
			echo '... download failed.';
		}
		echo "\r\n";
	}

	if ( file_put_contents( $directory . '/.last-revision', $svn_last_revision ) )
		echo "[CLEANUP] Updated $directory/.last-revision to " . $svn_last_revision . "\r\n";
	else
		echo "[ERROR] Could not update $directory/.last-revision to " . $svn_last_revision . "\r\n";
}

$end_time = time();
$minutes = ( $end_time - $start_time ) / 60;
$seconds = ( $end_time - $start_time ) % 60;

echo "[SUCCESS] Done updating Themes!\r\n";
echo "It took " . number_format( $minutes ) . " minute" . ( $minutes == 1 ? '' : 's' ) . " and " . $seconds . " second" . ( $seconds == 1 ? '' : 's' ) . " to update ". count( $success )  ." theme" . ( count( $success ) == 1 ? '' : 's') . "\r\n";
echo "[DONE]\r\n";

/**
 * Delete file/directory recursively. Based on WP_Filesystem_Direct->delete() because GPL.
 *
 * @param string $file
 *
 * @return bool
 */
function delete( $file ) {

	if ( empty( $file ) ) //Some filesystems report this as /, which can cause non-expected recursive deletion of all files in the filesystem.
		return false;

	$file = str_replace( '\\', '/', $file ); //for win32, occasional problems deleting files otherwise

	if ( is_file( $file ) )
		return unlink( $file );

	//At this point it's a folder, and we're in recursive mode
	$filelist = glob( $file . '/*', GLOB_MARK );
	$retval   = true;

	foreach ( $filelist as $filename ) {

		if ( ! delete( $filename ) )
			$retval = false;
	}

	// Build in micro-delay for filesystem to catch up with deletions.
	if ( file_exists( $file ) && usleep( 100 ) && ! rmdir( $file ) )
		$retval = false;

	return $retval;
}
